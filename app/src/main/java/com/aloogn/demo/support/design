1、CoordinatorLayout
    CoordinatorLayout可以理解为一个协调布局，通常做为一个上层的ViewGroup，把CoordinatorLayout当成一个
通信的桥梁，来连接不同的子View。这些子View 的具体响应动作都是通过Behavior实现。CoordinatorLayout单独使用
没啥效果，要配合直接子View对应的Behavior来实现各种各样的效果。
例子在activity_jni.xml

2、AppBarLayout
     AppBarLayout是ViewGroup容器组件，继承自LinerLayout，默认是垂直方向的。AppBarLayout的作用是把
AppBarLayout包裹的内容都作为AppBar（Material Design设计的App Bar）。AppBarLayout单独使用没有啥特别的效
果，要配合CoordinatorLayout实现滚动收缩效果


3、CollapsingToolbarLayout
     CollapsingToolbarLayout是工具栏包装器，用来实现“折叠效果”的工具栏。通常包含在AppBarLayout中使用。


4、TabLayout
    在开发中，我们常常需要ViewPager结合Fragment一起使用。这个时候通常会有一个Tab栏来显示当前切换到了那个
Fragment。这个Tab栏的布局就是是用TabLayout来实现的。

5、TextInputLayout
    TextInputLayout用于辅助显示提示信息(也包括错误信息)， 要和EditText(或EditText的子类）结合使用，并且
只能包含一个EditText(或EditText的子类）。有一点要特别注意如果你在TextInputLayout里面准备使用EditText的话
推荐使用TextInputEditText替换．因为TextInputEditText相对于EditText修复了一个bug（当键盘弹出布局被顶上去
的时候TextInputEditText表现更好点）。

6、NavigationView
    NavigationView是导航视图,一般会配合DrawerLayout来使用做抽屉菜单．

7、FloatingActionButton
   悬浮按钮。一般用来配合CoordinatorLayout使用，实现跟随某个（AppBarLayout）移动

8、Snackbar
   Snackbar提供了一个介于Toast和AlertDialog之间轻量级控件，它可以很方便的提供消息的提示和动作反馈
